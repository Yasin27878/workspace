package com.text;

import java.util.Collection;
import java.util.LinkedList;

public class LinkedListDemo {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		LinkedList ll= new LinkedList();
		Collection ll1=new LinkedList();
		for (int i = 0; i < 10; i++) {
			ll.add("林志玲"+i);
		}
		System.out.println(ll);
		
		for (int i = 0; i < 10; i++) {
			ll.add("周润发"+i);
		}
		//add(int index, E element) 在此列表中指定的位置插入指定的元素。
		ll.add(2, "刘德华");
		System.out.println(ll);
		
		//addAll(Collection<? extends E> c) 添加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序。
	     System.out.println(ll.addAll(ll1));
		
		//addFirst(E e) 将指定元素插入此列表的开头。
		ll.addFirst("习大大");
		System.out.println(ll);
		
		//clone() 返回此 LinkedList 的浅表副本。
		//LinkedList l2= new LinkedList();
		LinkedList l2=(LinkedList)ll.clone(); 
		System.out.println(l2);
		
		//contains(Object o) 
       // 如果此列表包含指定元素，则返回 true。
		System.out.println(ll.contains("刘德华"));
		
		//descendingIterator() 
        //返回以逆向顺序在此双端队列的元素上进行迭代的迭代器。
		System.out.println(ll.descendingIterator());
		
		//element() 
       // 获取但不移除此列表的头（第一个元素）。
		System.out.println(ll.element());
		System.out.println(ll);
		
		//get(int index) 
        //返回此列表中指定位置处的元素。
		System.out.println(ll.get(3));
		
		
	}
} 
